load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

# TODO(mehrdadn): The copy_file() rules below shouldn't be necessary in principle.
# However, for some reason, the current directory that some tests are launched with appear incorrect
# when cc_binary() is used directly, causing redis-server to fail to find the Redis module.
# This should be resolved at some point, and the binaries should be used directly.

copy_file(
    name = "cp_redis-server",
    src = ":_redis-server",
    out = "redis-server",
    visibility = ["//visibility:public"],
)

copy_file(
    name = "cp_redis-cli",
    src = ":_redis-cli",
    out = "redis-cli",
    visibility = ["//visibility:public"],
)

# TODO(mehrdadn): This hack is only present to suppress some "undeclared
# inclusion" errors on Bazel that appear to be superfluous and impossible to
# reproduce on some machines.
# It should be removed at some point when the problem is resolved.
cc_library(
    name = "_undeclared_includes",
    hdrs = glob([
        "**/*.c",
        "**/*.h",
    ]),
)

cc_library(
    name = "hiredis_deps",
    hdrs = [
        "deps/hiredis/async.h",
        "deps/hiredis/dict.c",
        "deps/hiredis/dict.h",
        "deps/hiredis/fmacros.h",
        "deps/hiredis/read.h",
    ],
    strip_include_prefix = "deps/hiredis",
)

cc_library(
    name = "hiredis",
    srcs = glob(
        [
            "deps/hiredis/*.c",
            "deps/hiredis/*.h",
        ],
        exclude =
        [
            "deps/hiredis/dict.c",
            "deps/hiredis/test.c",
        ],
    ),
    hdrs = [
        "deps/hiredis/hiredis.h",
    ],
    strip_include_prefix = "deps/hiredis",
    deps = [
        "_undeclared_includes",
        "hiredis_deps",
    ],
)

write_file(
    # Bazelified version of: src/mkreleasehdr.sh
    name = "mkreleasehdr",
    out = "src/release.h",
    content = [
        "#define REDIS_GIT_SHA1 \"00000000\"",
        "#define REDIS_GIT_DIRTY \"0\"",
        "#define REDIS_BUILD_ID \"0\"",
    ],
)

cc_library(
    name = "linenoise",
    srcs = [
        "deps/linenoise/linenoise.c",
        "deps/linenoise/linenoise.h",
    ],
    hdrs = ["deps/linenoise/linenoise.h"],
    strip_include_prefix = "deps/linenoise",
)

cc_library(
    name = "lua",
    srcs = glob([
        "deps/lua/src/*.c",
        "deps/lua/src/*.h",
    ]) + [
        "src/solarisfixes.h",
    ],
    hdrs = glob([
        "deps/lua/src/*.h",
    ]),
    local_defines = [
        "ENABLE_CJSON_GLOBAL",
        "LUA_ANSI",
    ],
    strip_include_prefix = "deps/lua/src",
)

cc_library(
    name = "dict",
    srcs = [
        "src/dict.c",
        "src/dict.h",
        "src/fmacros.h",
        "src/redisassert.h",
        "src/zmalloc.h",
    ],
    strip_include_prefix = "src",
)

cc_library(
    name = "libredis",
    srcs = [],
    hdrs = [
        "src/release.h",
    ] + glob([
        "src/*.h",
        "src/ae_*.c",
    ]),
    strip_include_prefix = "src",
)

cc_binary(
    name = "_redis-cli",
    srcs = [
        # These must end up equal to REDIS_CLI_OBJ in redis/src/Makefile
        "src/adlist.c",
        "src/adlist.h",
        "src/ae.c",
        "src/anet.c",
        "src/redis-cli.c",
        "src/release.c",
        "src/siphash.c",
        "src/zmalloc.c",
    ] + glob([
        "src/crc*.c",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":_undeclared_includes",
        ":dict",
        ":hiredis",
        ":libredis",
        ":linenoise",
        ":lua",
    ],
)

cc_binary(
    name = "_redis-server",
    srcs = glob(
        # These globs must end up equal to REDIS_SERVER_OBJ in redis/src/Makefile
        [
            "src/*.c",
        ],
        exclude =
        [
            "src/ae_*.c",
            "src/dict.c",
            "src/redis-benchmark.c",
            "src/redis-cli.c",
        ],
    ),
    local_defines = [
        "REDIS_STATIC=",
    ],
    linkopts = select({
        "@bazel_tools//src/conditions:windows": [
        ],
        "@bazel_tools//src/conditions:darwin": [
        ],
        "//conditions:default": [
            "-lm",
            "-ldl",
            "-lpthread",
            "-lrt",
        ],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":_undeclared_includes",
        ":dict",
        ":hiredis",
        ":libredis",
        ":lua",
    ],
)
